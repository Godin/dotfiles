# match files beginning with dot without need to specify this dot explicitly
setopt globdots

# forbid '>' to overwrite existing files, use '>!' or '>|' for that
setopt noclobber

#
# Key bindings
#
# See: http://zshwiki.org/home/zle/bindkeys#reading_terminfo

# Make sure that the terminal is in application mode when zle is active, since
# only then values from $terminfo are valid
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

# Use emacs key bindings
bindkey -e

# [Home]
[[ -n "${terminfo[khome]}" ]] && bindkey "${terminfo[khome]}" beginning-of-line
# [End]
[[ -n "${terminfo[kend]}" ]] && bindkey "${terminfo[kend]}" end-of-line
# [Delete]
[[ -n "${terminfo[kdch1]}" ]] && bindkey "${terminfo[kdch1]}" delete-char
# [PageUp]
[[ -n "${terminfo[kpp]}" ]] && bindkey "${terminfo[kpp]}" up-line-or-history
# [PageDown]
[[ -n "${terminfo[knp]}" ]] && bindkey "${terminfo[knp]}" down-line-or-history
# [Ctrl-RightArrow]
bindkey '^[[1;5C' forward-word
# [Ctrl-LeftArrow]
bindkey '^[[1;5D' backward-word
# [Ctrl-r]
bindkey '^r' history-incremental-search-backward

# Do not exit on end-of-file (Ctrl-D). Require the use of "exit" or "logout" instead
setopt IGNORE_EOF

# Slash should not be considered as part of word
WORDCHARS=${WORDCHARS:s:/:}

#
# History
#

HISTFILE=$HOME/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

setopt extended_history
setopt hist_ignore_dups
setopt hist_ignore_space
setopt inc_append_history

#
# Prompt
#

# TODO: duplicated from bash config
function prompt_info {
  local g="$(git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$g" ]; then
    # current working directory in repository
    local subdir=$(git rev-parse --show-prefix 2>/dev/null)
    subdir="${subdir%/}"
    local workdir="${PWD%/$subdir}"
    printf "%s" "${workdir/*\/}${subdir:+/$subdir}%{$reset_color%}"
  else
    # current working directory, with $HOME abbreviated with a tilde
    printf "%s" $(echo $PWD | sed -e "s#^$HOME#~#g")
  fi
}

autoload -U colors && colors
setopt prompt_subst
GIT_PS1_SHOWUPSTREAM="verbose"
# TODO: not portable
if (( $+commands[brew] )); then
  source "$(brew --prefix)/etc/bash_completion.d/git-prompt.sh"
else
  source /usr/share/git/git-prompt.sh
fi
PROMPT='%{$fg_bold[blue]%}$(prompt_info) $(__git_ps1 "[%s] ")%{$fg_bold[blue]%}$%{$reset_color%} '

#
# Completion
#

autoload -Uz compinit
compinit

zstyle ':completion:*:*:*:*:*' menu select

# group by name of tag
zstyle ':completion:*' group-name ''

# show group description
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'

zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

#
# Dotfiles
#

# TODO get rid of hard-coded path
export DOTFILES=$HOME/projects/dotfiles
PATH="$DOTFILES/bin:$HOME/bin:$PATH"

for config_file in $DOTFILES/**/*.zshrc
do
  source $config_file
done
unset config_file

#
# Local configuration
#

if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

cdpath=( ~/projects )

#
# tmux
#

if (( $+commands[tmux] )); then
  if [[ -z "$TMUX" ]]; then
    tmux attach || tmux new; exit
  fi
fi
